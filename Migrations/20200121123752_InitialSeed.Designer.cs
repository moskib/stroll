// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stroll.Data;

namespace Stroll.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200121123752_InitialSeed")]
    partial class InitialSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Stroll.Models.AppointmentStatus", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("UID");

                    b.ToTable("appointment_statuses");

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Status = "open"
                        },
                        new
                        {
                            UID = 2,
                            Status = "taken"
                        },
                        new
                        {
                            UID = 3,
                            Status = "cancelled"
                        });
                });

            modelBuilder.Entity("Stroll.Models.Business", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.HasKey("UID");

                    b.ToTable("businesses");
                });

            modelBuilder.Entity("Stroll.Models.BusinessUser", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessID")
                        .HasColumnName("business_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("UID");

                    b.HasIndex("BusinessID");

                    b.HasIndex("UserID");

                    b.ToTable("business_users");
                });

            modelBuilder.Entity("Stroll.Models.ClientUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("client_users");
                });

            modelBuilder.Entity("Stroll.Models.Schedule", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessUserID")
                        .HasColumnName("business_user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientUserID")
                        .HasColumnName("client_user_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.HasKey("UID");

                    b.HasIndex("BusinessUserID");

                    b.HasIndex("ClientUserID");

                    b.HasIndex("Status");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("Stroll.Models.User", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.HasKey("UID");

                    b.HasIndex("Type");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Stroll.Models.UserType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("UID");

                    b.ToTable("user_types");

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Type = "client"
                        },
                        new
                        {
                            UID = 2,
                            Type = "business_employee"
                        },
                        new
                        {
                            UID = 3,
                            Type = "business_admin"
                        });
                });

            modelBuilder.Entity("Stroll.Models.BusinessUser", b =>
                {
                    b.HasOne("Stroll.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stroll.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stroll.Models.ClientUser", b =>
                {
                    b.HasOne("Stroll.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stroll.Models.Schedule", b =>
                {
                    b.HasOne("Stroll.Models.BusinessUser", "BusinessUser")
                        .WithMany()
                        .HasForeignKey("BusinessUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stroll.Models.ClientUser", "ClientUser")
                        .WithMany()
                        .HasForeignKey("ClientUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stroll.Models.AppointmentStatus", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stroll.Models.User", b =>
                {
                    b.HasOne("Stroll.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
